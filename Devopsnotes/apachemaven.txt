                                           *APACHE MAVEN*

What is Maven?
u
"Maven is a build tool that is used to compile, validate codes, and analyse the test-cases in the code".

-> Manages the building, reporting and documentation from source control management(SCM)

-> Maven projects are configured through project object model (POM)

-> POM.XML file contains documentation for all of the object, properties , methods and event.

What Maven is capable of?

-> Information of project is Centralized through Maven.

-> Our software project is modeled by it.

-> Build process is managed

-> Data about the software project is gathered and then build itself

-> Document the software and our project

-> Deployable artifacts can be generated from source code

-> your source code is complied , packed , test , and distributed

-> Report is created, website is generated for the project.

Maven Build lifecycle :-

-> In maven the build is run using a predefined and ordered set of steps to all the build life-cycle

-> The build tasks that will be performed during each phase are determined by the configuration in the project file, and in particular the selected packaging

-> Maven relies on build lifecycle to define the process of building and distributing artifacts (Eg;- Jarfiles , war files)

-> There are three build-in build life cycle 
    
     . Default- handles project building & deployment
     . Clean - handles project cleaning
     . Site - handles project site generation

MAVEN AECHITECTURE:-

   - Remote repository is referring to organisation level
   - Local repository is referring to local machine (windows)
   - central repository is referring to apache maven.

Maven Artifacts:-

-> An Artifact is a file resulting from packaging a project 

-> Can be a jar, war, ear, .XML file , for example 

-> Artifacts are deployed in repositories, so they can be used as dependencies by other project

-> Artifacts are identified by three components:
   * Group ID - An unique identifier for a group of related artifacts. usually named like java packages (Eg:- pt.jpereira.mobile).
   * Artifact Id - An unique identifier, within the context of groupid, that identifies the artifacts (Project) . [Ex:- puzzle]
   *version - Also called artifact co-ordinates

MAVEN REPOSITORY FLOW :-

STEP-1 :- When developer executes Mvn it will go and check in local repository. if found the dependencies and plugins in local repository developer will see the outfit

STEP-2 :- If not found in local repository from developer machines it will go and search in remote repository.

STEP-3 :- From remote repository required dependencies or plugins will get stored in local repository.

STEP-4 :- From local repository developer will get the output.

PROJECT OBJECT MODEL (POM):-

-> Pom for short

-> XML file located at the root of the project (Pom.xml)

-> It includes configuration for your project, including
   . Information about the project 
   . Configuration details to build the project 
   . Contains default values for most of the project
     Eg:- Source dir, target dir
   . Dependencies of the project
   . Configuration about plugins and goals
   . Used repositories

DECLARING DEPENDENCIES:-

  While declaring the dependencies coordinate of the artifacts must be provided:
   -> Group ID - A unique identifier for the group of related artifacts
   -> Artifacts ID:- An artifact is a file which is made after packaging a project and artifact id is a unique identifier within the context of group id and it identifies the artifacts.
   -> Version :- It is an adentifier for the release or build number of project.


  
MAVEN THROUGH TERMINAL:-

*Install the maven jar file after verifying the signature
*After installing the maven check its version from ubuntu terminal by using the below command 
  			mvn -version

mvn archetype:generate -DgroupId=com.example -DartifactId=helloworld -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false



MAVEN LIFECYCLE PHASES(8)

VALIDATE:- Check if the projects is correct having all the necessary information
			mvn validate
COMPILE:- Compile the source code of project
			mvn compile
TEST :- Test the compiled source code using suitable unit testing framework these tests should not require the code be packaged  	or deployed
			mvn test
PACKAGE:- Take the compiled code and package in it distributable format such as JAR
			mnv package
INTEGRATION:-Process and deploy the package into an environment where integration tests can be run
			mvn integration test
VERIFY:- Run any checks to verify the package
			mvn install
INSTALL:- Install the package into the local repository for use as a dependency in other projects locally
			mvn install
DEPLOY:- Done in an integration or release environment copies the final package to the remote repository for sharing with other developers and projects 
			mvn deploy



*** WHAT IS MEAN BY .M2 FOLDER ?
  -> .m2 folder It is a local repository of apache maven
  -> Local repository is a .m2 where dependencies plugins are stored.


*** Apache maven has an advantage that is when we run any of the life cycle phases which will also include previous phases as well .
ex:- if we run mvn package  (which is fourth phase ) which is run previous phases as well (validate , compile, test ) 







