               * Git *



* Why we need a Version Control System (VCS)?

    - Collaboration

    - Storing versions

    - Figuring out what happened

    - Backup




* What is VCS?
  Version control is a system that documents changes made to a file or a set of files.It allows multiple users to manage multiple reversions of the same unit of information.It is a      snapshot of your project over time.



* Types...!

1. Local Version Control (LVC):

     - The practice of having the version database in the local computer.

     - The local database keeps a record of the changes made to files in the version database.


 Drawbacks:

 Issue: Multiple people working parallelly on the same project.

 Solution: CVC (Centralized Version Control).



2. Centralized Version Control (CVC):

     - Local Version Control's issues are resolved by CVC.

     - In CVC, a central repository is maintained where all the versioned files are kept.

     - Now users can check out and check in files from to their different consoles at any time.


 Issue: In case the central server fails, the whole system goes down.

 Solution: DVCS (Distributed Version Control System).





3. Distributed Version Control (DVCS): (Remote Server)

     - The version database is stored at every user's local system and the remote server.

     - Users manipulate the local files and then upload the changes to the remote server.

     - If any of the servers die, a client server can be used to restore.



 * what basic work flow of git..?
    - Git clone
    - working directory
    - staging area
    - local repository
    - Remote repository(remote repo is a server where all the collaboraters upload's changes made to the files)



* What is Git?
  Git is an open-source distributed version control system (DVCS) that records changes made to the files, laying emphasis on speed, data integrity, and distributed, non-linear workflows.

  - In git (Dvcs) everything will be track's like interesting or modifying a file , deletion..etc



* Git File Workflow *

 Remote Repository: The server where the collaborators upload changes made to the files.



1. Git Local Repository $ Remote Repository:

  - A local repository is a user’s copy of the version database.

  - The user accesses all the files through the local repository and then pushes the changes made to the remote repository.



2. Workspace:

  - It is a user’s active directory where they create new files.

  - In this space, Git tracks changes compared to your local repository.



3. Stage:

  - A place where all the modified files marked to be committed are placed.



4. Clone:

   - The clone command creates a copy of an existing remote repository inside the local repository.


5. Commit:

  - The commit command commits all the files in the staging area to the local repository.


6. Push:

  - The push command pushes all the changes made in the local repository to the remote repository.


7. Fetch:

  - The fetch command collects the changes made in the remote repository and copies them to the local repository.

  - This command doesn’t affect your workspace.


8. Pull:

  - The pull command, like fetch, gets all the changes from the remote repository and copies them to the local repository.

  - Pull merges those changes into the current working directory.



      ** Branching stratagies in GitHub **      (Day-3)



 1. Base branch : The default branch is considered the “base” branch in your repository (main , master,major..)

 2. Develop (development branch) : development branch called as develop in workflows like Git Flow in Git hub ,you can perform a variety
    of tasks related to collaborative development.

   - we can do some common things with development branch like "Collaborate with the Team, Resolve the conflicts"

 3. QA(Quality Assurance testing) : used for testing and validating code before it's merged into the production branch.

 4. Release :for preparing new releases

 5. Feature :for new features

 6. Hotfix :fixes the bugs or issues in production



* Pull Requst : A pull request is a way to propose your changes to a project, get feedback from others, and then merge those changes into the main code.


* Why use pull requests?

 - Code Review: Allows others to review your changes before they are added to the main project, ensuring better quality and fewer bugs.

 - Collaboration: Helps teams collaborate on code while maintaining a clean and stable codebase.

 - History & Discussion: Pull requests keep a record of the discussion around a change and the history of why certain decisions were made.



* PAT (Personal Access Token) : In GitHub is a secure way to authenticate yourself when interacting with GitHub’s API 
                                                     (or)
                               performing Git operations (like cloning, pushing, or pulling) without using your GitHub password.




* Fork : In GitHub, a fork is a copy of a repository that you create under your own GitHub account. Forking allows you to freely 
         experiment with changes without affecting the original repository.



* Tags : A Git tag is a way to mark specific commits in your project’s history.

    - Tags are used to capture specific versions of your project, making it easy to refer back.





